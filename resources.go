// Code generated by "esc -private -local-prefix-cwd -pkg=main -o=resources.go template/"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(path.Join("/Users/martin/go/src/github.com/programmfabrik/errorgen", f.local))
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// _escFS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func _escFS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// _escDir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func _escDir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// _escFSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func _escFSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// _escFSMustByte is the same as _escFSByte, but panics if name is not present.
func _escFSMustByte(useLocal bool, name string) []byte {
	b, err := _escFSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// _escFSString is the string version of _escFSByte.
func _escFSString(useLocal bool, name string) (string, error) {
	b, err := _escFSByte(useLocal, name)
	return string(b), err
}

// _escFSMustString is the string version of _escFSMustByte.
func _escFSMustString(useLocal bool, name string) string {
	return string(_escFSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/template/codegen.go.tmpl": {
		name:    "codegen.go.tmpl",
		local:   "template/codegen.go.tmpl",
		size:    3278,
		modtime: 1603352084,
		compressed: `
H4sIAAAAAAAC/5xWS2/bRhA+h79iytoFGSiruwFdCqdBD02EymkPaQ4rcigvTK3Y5VK2QPC/FzP7EClL
qltfLO7O45tvXtvI4kluEPoexL1Y+q9hSBK1bXbGQpYApNXWpvR/fbDY8i+LL3ZucdvU0iKftNYovXG3
ptNWbXFe4rrb0EnffwAj9Qbhxtu9W8CNuBe/uq9hIDWSCvfDEPRQl3SfJ8l8Dl/2aJ6Nsgj2UbVgd6B0
UXclQgAjful08ZtsQGm7A/uIYFCXSOCSvTQUKTleGqzUCwzDg9cjtfaVlSSxhwZfKX00Zmc+oSYnaCpZ
IPQJAB9nOTguknd/GtlkSIf5RRPJu6/6meRyYMkE4F5ameWwlc03Z+l7dNMPMJ/D72g7o1sWhK7FEqqd
GcUJ8FluMQIhFTqAXcWEBD8rK4unLIdv3ymxY8Mt3UzFhyTp+5DEEisyOIMbNGYpjdy2IaP3WMmutq3L
6Vn26NtbgGE4ckgUwmWi/KWH0GgHoCHv7PwIhV3T3ye0ZI5lYRgylwZWEQ9HsdWJ2FQoD559JQIMyfFr
xAoaM+PIAhcM3cOZz8/ygMa4e/4gxcYobStIb9vbNh0rnMiupsLsKyUbBGrEPK6I5NaarrDgKG6kQW1j
HfAB8eYwDIOjkW9cJbgK4cgnpqPs1P4oS46QJTNSYiVOM8Q93xBCXxVL5jzQxQf3QXyagyOpXEbG164E
jc+gdGulLrjmo8izso9QugKFvaw7pCCrThdRxpeII81Fw1mJh72DgsIxswAecsL30n8PH1Tlw/zjeExO
F4AiskMlGXP94z4dqeRHU5Gc0y/HDcQMcsjZqD7y6cDox1qvXMc6vGDLTdEsh+x9nKdhzM4gzMOxiyj2
GZ+zVKe58EHxVM6uzuwou5SmxczvIfFg1PYsa+ILDMMMUvhLp3l+JYqT8TgB7NN/RXu6C7y25fCpGlB4
kvhcVXz+wwK0qr0sdaVWRVZtrVi5KLKUrUKx2zaqJrOBuDu4/Ttl47mz6PK+7ngW8d4WP3dVhSbUrzGw
ACs+vmDRWcx+WnfVDFC43fO/UCGbegMqz+G6q8SK2cliGo6t84SH680zn4fx/oSH8QCgncXNHRbYEx5Y
40yWJhayfDqDQsQx525MiqPGKCg/ijyWFu0YiNTlaD4Vu+YwWa6QdS3yDi8epdJKb/JLgEdo99OR+Xpw
wTnIsID9SVxvjUJpaGpZ4ATb+3HHTNh8je8NqPx6C8uVEfEzJ9JX125doUXTgmzpnXS2Ba8/oxyYkkzf
LS4InW6zyzX5YbLQpjPHRXgHKLja6JtqbXZmTk/6g7CNFh09JmGj9qjj4j6Xg/DmhH95d3oCqMeFfw+c
bfT0q5brGumpTc9U6PsbDKtU1gZleQB8US03vjMk0nG3R/MLgvTGdQTTR/Hp8HUWnfqoWv4JAAD//+ZJ
zbDODAAA
`,
	},

	"/template": {
		name:  "template",
		local: `template/`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"template/": {
		_escData["/template/codegen.go.tmpl"],
	},
}
