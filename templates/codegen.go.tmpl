package {{ .D.Package }}

import (
  "fmt"
  "bytes"
  "text/template"
  "strings"
  {{- range $import := $.D.Import }}
  "{{- $import }}"
  {{- end }}
)

// Overwrite this to include template.FuncMap into the rendering
var {{ $.D.Prefix }}TemplateFuncs template.FuncMap

type {{ $.D.Prefix }}ErrorGen interface {
  Error() string
	Unwrap() error
  Params() interface{} // Returns params used for rendering
  Package() string // Package name
  ErrorCode() string // Name / code of the error
}

{{ range $defName, $errParams := $.D.Defaults }}
  // {{ $.D.Prefix }}{{ $defName }}
  type {{ $.D.Prefix }}{{ $defName }} interface{
    {{ $.D.Prefix }}ErrorGen
    {{ range $pname, $param := $errParams }}
      Get{{ $pname }}() {{ $param.T }}
      Set{{ $pname }}({{ $param.T }})
    {{ end }}
  }
{{ end }}

{{ range $err, $def := $.D.Errors }}
  // {{ $.D.Prefix }}{{ $err }}
  {{ $e := printf "%s%s" $.D.Prefix $err }}
  {{ $eS := printf "%sError" $e }}
  {{ $eP := printf "%sParams" $e }}

  type {{ $eS }} struct {
    parent error
    params {{ $e }}Params
  }

  type {{ $eP }} struct {
    {{ range $p, $defP := $def.Params }}
      {{- $p }} {{ $defP.T }} `json:"{{ lower $p }}"` // {{ $defP.D }}
    {{ end }}
  }

  // {{ $e }} returns a new instance of {{ $e }} with default values
  func {{ $e }}() *{{ $eS }} {
    e := &{{ $eS }}{}
    {{ range $p, $defP := $def.Params }}
      {{ if $defP.V }}
        e.{{- $p }}({{ printf "%#v" $defP.V }})
      {{ end }}
    {{ end }}
    return e
  }

  func (e {{ $eS }})ErrorCode() string {
    return {{ printf "%#v" $err }}
  }

  func (e {{ $eS }})Package() string {
    return {{ printf "%q" $.D.Package }}
  }

  func (e {{ $eS }}) templ() (*template.Template, error) {
    tf := {{ $.D.Prefix }}TemplateFuncs
    if tf == nil {
      tf = template.FuncMap{}
    }
    tf["Unwrap"] = func() error {
      return e.parent
    }
    return template.New("n").
      Funcs(tf).
      Parse(strings.Trim({{ printf "%#v" $def.O }}, " \n"))
  }

  func (e {{ $eS }}) Error() string {
    t, err := e.templ()
    if err != nil {
      panic(fmt.Sprintf("Error compiling template: %q", err))
    }
    buf := bytes.Buffer{}
    err = t.Execute(&buf, e.Params())
    if err != nil {
      panic(fmt.Sprintf("Error executing template: %q", err))
    }
    return buf.String()
  }

  {{ range $key, $defP := $def.Params }}
    // Get{{ $key }} returns the value of the key
    func (e {{ $eS }}) Get{{ $key }}(){{ $defP.T }} {
      return e.params.{{ $key }}
    }
    // Set{{ $key }} set the value of the key
    func (e *{{ $eS }}) Set{{ $key }}(v {{ $defP.T }}) {
      e.params.{{ $key }} = v
    }
    // {{ $key }} sets the value and returns a copy of the error (use for chaining)
    func (e *{{ $eS }}) {{ $key }}(v {{ $defP.T }}) *{{ $eS }} {
      e.params.{{ $key }} = v
      return e
    }
  {{ end }}

  // Params returns all parameters as map
  func (e {{ $eS }})Params() interface{} {
    return e.params
  }

  // Wrap given error
  func (e *{{ $eS }}) Wrap(err error) *{{ $eS }} {
    if e.parent != nil {
      panic("Unable to wrap {{$e}} with already existing parent.")
    }
    e.parent = err
    return e
  }

  // Is return true if the passed error is the same
  func (e *{{ $eS }}) Is(err error) bool {
  	e1, ok := err.({{ $.D.Prefix }}ErrorGen)
    if ok {
      return e1.ErrorCode() == e.ErrorCode()
    }
    return false
 }

  // Unwrap implements stdlib errors.Is support
  func (e *{{ $eS }}) Unwrap() error {
    return e.parent
  }

{{ end }}

